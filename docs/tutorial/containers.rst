.. _tutorial/containers:

*********************
Containers
*********************

This tutorial assumes you have a redux-like setup using react-router to manage your detail, index, and create components.
If you're using conveyor-redux to handle your actions, then your selectors will look differently.

=================
Redux Review
=================

A Container connects a pure stateless react component (Detail) with actions ('mapDispatchToProps', which we don't need to pass into conveyor) and props (mapStateToProps, which we need for conveyor). The actions (such as 'onInputChange' or 'onSave') are generated by conveyor-redux (see their docs for more info). They handle the data flow during click/type/scroll/submit/ect events. Note: unlike other frameworks, conveyor actions are passed into the components through the schema (schema.actions) instead of passed into 'mapDispatchToProps'. The 'state' prop contains the entire redux store and selectors, 'selectEdit()', filter out certain aspects.

 .. code-block:: javascript

    import { Detail } from 'conveyor'

    // example of selector: filter out 'edit' data from the redux store
    export const selectEdit = state => R.prop('edit', state)

    const mapStateToProps = (state, props) => ({
        editData: selectEdit(state), // selector for redux store
        data, // other needed data
        schema, // some schema with meta data
      })

    const mapDispatchToProps = (dispatch) => ({})

    export const DetailContainer = connect(
        mapStateToProps,
        mapDispatchToProps)(Detail)


=================
Props Explained
=================

*schema* : Object containing metadata (see conveyor-schema for more info); blueprint for building conveyor components

*modelName* : must match 'modelName' in schema for the object(s) you're displaying.

*node* : object containing data to be displayed

*data* : ordered list of nodes (used for Index container only)

*id* : string id of the instance (Detail container only).

*path* : has 3 uses:

1.) detail create button (Action: 'onDetailCreate') uses the pathname in the payload to return the parent model page after creation is complete. Your 'onDetailCreate' reducer will have access to this parent modelName. This is so that, upon successful saving, you can redirect from the create page to the parent detail page.

2.) index create button (Action: 'onIndexCreate') uses the pathname to generate the 'originPath' variable in the 'create' part of redux store. this dictates what page to redirect to after successfully saving everything in create stack.

3.) 'Tabs' feature uses this pathname to set up routing. All router tabs will be prefixed with this pathname.

*selectors* :

1.) editData: edit values from form inputs

2.) modalData: delete warning text

3.) selectOptions: select drop-down for relationship inputs (Action: 'onMenuOpen')

3.) tooltipData: tooltip data

4.) formStack: create data

=================
Index Container
=================

Import 'Index' component from Conveyor and connect it to your redux store ('editData', 'modalData', ect).

 .. code-block:: javascript

    import { connect } from 'react-redux'
    import * as R from 'ramda'
    import schema from '../models/schema'
    import { Index } from 'conveyor'
    import { selectEdit } from "../reducers/edit"
    import { selectOptions } from "../reducers/options"
    import { selectModal } from "../reducers/modal"
    import { selectTooltip } from '../reducers/tooltip'

    const mapStateToProps = (state, props) => {
      // get modelName from router, or declare string
      const modelName = R.path(['match', 'params', 'modelName'], props)
      // get data for component, wherever its cached for your app
      const data = selectData(state, modelName)

      return ({
        schema,
        modelName,
        data,
        editData: selectEdit(state),
        modalData: selectModal(state),
        path: `/${modelName}`,
        selectOptions: selectOptions(state),
        tooltipData: selectTooltip(state),
        tableView: selectTableView(state),
      })
    }

    const mapDispatchToProps = (dispatch) => ({})

    export const IndexTableContainer = connect(
        mapStateToProps,
        mapDispatchToProps)(Index)


=================
Detail Container
=================

Import 'Detail' component from Conveyor and connect it to your redux store ('editData', 'modalData', ect).

 .. code-block:: javascript

    import { connect } from 'react-redux'
    import { Detail } from 'conveyor'
    import * as R from 'ramda'
    import schema from '../models/schema'
    import { selectEdit } from "../reducers/edit"
    import { selectOptions } from '../reducers/options'
    import { selectModal } from '../reducers/modal'
    import { selectTooltip } from '../reducers/tooltip'

    const mapStateToProps = (state, props) => {
      const modelName = R.path(['match', 'params', 'modelName'], props)
      let id = R.path(['match', 'params', 'id'], props)
      id = Number(id)
      // get data however you store it
      const node = selectData(state, modelName, id)

      return ({
        schema,
        node,
        modelName,
        path: `/${modelName}/${id}`, // get location pathname, including any tab pills
        id,
        editData: selectEdit(state),
        tooltipData: selectTooltip(state),
        modalData: selectModal(state),
        selectOptions: selectOptions(state),
        tableView: selectTableView(state),
      })
    }

    const mapDispatchToProps = (dispatch) => ({})

    export const DetailContainer = connect(
        mapStateToProps,
        mapDispatchToProps)(Detail)


=================
Create Container
=================

Import 'Create' from Conveyor and connect it to the redux store.

 .. code-block:: javascript

    import { connect } from 'react-redux'
    import * as R from 'ramda'
    import { Create } from 'conveyor'
    import {selectOptions} from "../reducers/options"
    import schema from '../models/schema'
    import { selectCreate } from '../reducers/create'

    const mapStateToProps = (state, props) => {
      // get formStack from your state and find modelName being created (see conveyor-redux for more info)
      const formStack = selectCreate(state)
      const stack = R.prop('stack', formStack)
      const index = R.prop('index', formStack)
      const modelName = R.path([index, 'modelName'], stack)
      return ({
        schema,
        modelName,
        formStack,
        selectOptions: selectOptions(state),
      })
    }


    const mapDispatchToProps = (dispatch) => ({})

    export const CreateContainer = connect(
        mapStateToProps, mapDispatchToProps)(Create)
